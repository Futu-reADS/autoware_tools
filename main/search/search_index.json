{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"autoware_tools","text":""},{"location":"#autoware_tools","title":"autoware_tools","text":"<p>This is a repository for keeping packages that are not needed at runtime, including packages for benchmarking, debugging, tuning, calibrating, etc.</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":""},{"location":"CONTRIBUTING/#contributing","title":"Contributing","text":"<p>See https://autowarefoundation.github.io/autoware-documentation/main/contributing/.</p>"},{"location":"DISCLAIMER/","title":"DISCLAIMER","text":"<p>DISCLAIMER</p> <p>\u201cAutoware\u201d will be provided by The Autoware Foundation under the Apache License 2.0. This \u201cDISCLAIMER\u201d will be applied to all users of Autoware (a \u201cUser\u201d or \u201cUsers\u201d) with the Apache License 2.0 and Users shall hereby approve and acknowledge all the contents specified in this disclaimer below and will be deemed to consent to this disclaimer without any objection upon utilizing or downloading Autoware.</p> <p>Disclaimer and Waiver of Warranties</p> <ol> <li> <p>AUTOWARE FOUNDATION MAKES NO REPRESENTATION OR WARRANTY OF ANY KIND,    EXPRESS OR IMPLIED, WITH RESPECT TO PROVIDING AUTOWARE (the \u201cService\u201d)    including but not limited to any representation or warranty (i) of fitness or    suitability for a particular purpose contemplated by the Users, (ii) of the    expected functions, commercial value, accuracy, or usefulness of the Service,    (iii) that the use by the Users of the Service complies with the laws and    regulations applicable to the Users or any internal rules established by    industrial organizations, (iv) that the Service will be free of interruption or    defects, (v) of the non-infringement of any third party's right and (vi) the    accuracy of the content of the Services and the software itself.</p> </li> <li> <p>The Autoware Foundation shall not be liable for any damage incurred by the    User that are attributable to the Autoware Foundation for any reasons    whatsoever. UNDER NO CIRCUMSTANCES SHALL THE AUTOWARE FOUNDATION BE LIABLE FOR    INCIDENTAL, INDIRECT, SPECIAL OR FUTURE DAMAGES OR LOSS OF PROFITS.</p> </li> <li> <p>A User shall be entirely responsible for the content posted by the User and    its use of any content of the Service or the Website. If the User is held    responsible in a civil action such as a claim for damages or even in a criminal    case, the Autoware Foundation and member companies, governments and academic &amp;    non-profit organizations and their directors, officers, employees and agents    (collectively, the \u201cIndemnified Parties\u201d) shall be completely discharged from    any rights or assertions the User may have against the Indemnified Parties, or    from any legal action, litigation or similar procedures.</p> </li> </ol> <p>Indemnity</p> <p>A User shall indemnify and hold the Indemnified Parties harmless from any of their damages, losses, liabilities, costs or expenses (including attorneys' fees or criminal compensation), or any claims or demands made against the Indemnified Parties by any third party, due to or arising out of, or in connection with utilizing Autoware (including the representations and warranties), the violation of applicable Product Liability Law of each country (including criminal case) or violation of any applicable laws by the Users, or the content posted by the User or its use of any content of the Service or the Website.</p>"},{"location":"bag2lanelet/","title":"bag2lanelet","text":""},{"location":"bag2lanelet/#bag2lanelet","title":"bag2lanelet","text":"<p>This package generates a lanelet map necessary for Autoware's autonomous driving from rosbag data containing information about Localization (<code>/tf</code>). This enables autonomous driving based on manual driving information.</p> <p>The provided functionalities are as follows:</p> <ul> <li>bag2lanelet.py: Generates lanelet (.osm) from a rosbag based on the position of <code>base_link</code>.</li> <li>bag2trajectory.py: Generates trajectory information (.csv) for vector_map_builder from a rosbag.</li> </ul>"},{"location":"bag2lanelet/#example","title":"Example","text":"<p>As an example, the process of lanelet generation based on driving trajectories from the planning simulator is performed as follows. Typically, the expectation is to use rosbag data from manual driving, rather than from the planning simulator.</p> <p>Firstly, you need to run the planning_simulator following the planning_simulator tutorial in Autoware Documentation. The process would be, install Autoware, download the maps, run the planning_simulator, and start autonomous driving. Make sure to save the rosbag during this driving session using the following command:</p> <pre><code>ros2 bag record /tf -o /tmp/bag2lanelet_sample.bag\n</code></pre> <p> </p> <p>After completing the drive, you can run the <code>bag2lanelet.py</code> script. This requires specifying the output directory, lane width and MGRS coordinates:</p> <pre><code>./bag2lanelet.py /tmp/bag2lanelet_sample.bag /tmp/bag2lanelet_sample -l 3.0 -m 54SUE\n</code></pre> <p>The map will be saved in the specified directory, following the naming convention <code>&lt;date&gt;-lanelet2_map.osm</code>. The map generated will appear like this. You can see the example result in ./example/lanelet2_map.osm.</p> <p>When you relaunch the planning_simulator with the new lanelet2 map, you will see the following.</p> <p> </p> <p>Please note that at this stage, although this map works with Autoware, the shape of the lanes will appear jagged. (Refer to the 'Limitations' section for more details.) While this is an issue that should be addressed in the future, it can currently be resolved by loading it in Vector Map Builder as follows.</p> <p>Following the documentation of the Vector Map Builder, import the generated Lanelet2 map. You can see the refined lane on the application.</p> <p> </p> <p>Then, Export the map. You can run the planning_simulator with the refined lanelet2 map and see how it goes on the Rviz.</p> <p> </p>"},{"location":"bag2lanelet/#requirements","title":"Requirements","text":"<pre><code>sudo apt update\nsudo apt install ros-humble-tf-transformations ros-humble-tf-transformations\npip install -r requirements.txt\n</code></pre>"},{"location":"bag2lanelet/#usage","title":"Usage","text":"<p>Check <code>./bag2lanelet.py --help</code></p>"},{"location":"bag2lanelet/#generate-lanelet2-file","title":"generate lanelet2 file","text":"<p>For given lane width and MGRS coordinate.</p> <pre><code>./bag2lanelet.py /home/autoware/rosbag/sample .  -l 3.0 -m 54SUE\n</code></pre>"},{"location":"bag2lanelet/#generate-trajectory-file-for-vector-map-builder","title":"generate trajectory file for Vector Map Builder","text":"<pre><code>./bag2trajectory.py /home/autoware/rosbag/sample sample.csv\n</code></pre>"},{"location":"bag2lanelet/#limitations","title":"Limitations","text":"<p>Here is the limitations of this package. Contributions to further improvements are more than welcome.</p> <ul> <li>Due to the low conversion accuracy from MGRS to latitude and longitude in this script, the lanes in the output lanelet.osm appear jagged. Importing and then exporting through vector_map_builder corrects these values with high accuracy.</li> </ul>"},{"location":"common/tier4_debug_tools/","title":"tier4_debug_tools","text":""},{"location":"common/tier4_debug_tools/#tier4_debug_tools","title":"tier4_debug_tools","text":"<p>This package provides useful features for debugging Autoware.</p>"},{"location":"common/tier4_debug_tools/#usage","title":"Usage","text":""},{"location":"common/tier4_debug_tools/#tf2pose","title":"tf2pose","text":"<p>This tool converts any <code>tf</code> to <code>pose</code> topic. With this tool, for example, you can plot <code>x</code> values of <code>tf</code> in <code>rqt_multiplot</code>.</p> <pre><code>ros2 run tier4_debug_tools tf2pose {tf_from} {tf_to} {hz}\n</code></pre> <p>Example:</p> <pre><code>$ ros2 run tier4_debug_tools tf2pose base_link ndt_base_link 100\n\n$ ros2 topic echo /tf2pose/pose -n1\nheader:\n  seq: 13\nstamp:\n    secs: 1605168366\nnsecs: 549174070\nframe_id: \"base_link\"\npose:\n  position:\n    x: 0.0387684271191\n    y: -0.00320360406477\n    z: 0.000276674520819\n  orientation:\n    x: 0.000335221893885\n    y: 0.000122020672186\n    z: -0.00539673212896\n    w: 0.999985368502\n---\n</code></pre>"},{"location":"common/tier4_debug_tools/#pose2tf","title":"pose2tf","text":"<p>This tool converts any <code>pose</code> topic to <code>tf</code>.</p> <pre><code>ros2 run tier4_debug_tools pose2tf {pose_topic_name} {tf_name}\n</code></pre> <p>Example:</p> <pre><code>$ ros2 run tier4_debug_tools pose2tf /localization/pose_estimator/pose ndt_pose\n\n$ ros2 run tf tf_echo ndt_pose ndt_base_link 100\nAt time 1605168365.449\n- Translation: [0.000, 0.000, 0.000]\n- Rotation: in Quaternion [0.000, 0.000, 0.000, 1.000]\nin RPY (radian) [0.000, -0.000, 0.000]\nin RPY (degree) [0.000, -0.000, 0.000]\n</code></pre>"},{"location":"common/tier4_debug_tools/#stop_reason2pose","title":"stop_reason2pose","text":"<p>This tool extracts <code>pose</code> from <code>stop_reasons</code>. Topics without numbers such as <code>/stop_reason2pose/pose/detection_area</code> are the nearest stop_reasons, and topics with numbers are individual stop_reasons that are roughly matched with previous ones.</p> <pre><code>ros2 run tier4_debug_tools stop_reason2pose {stop_reason_topic_name}\n</code></pre> <p>Example:</p> <pre><code>$ ros2 run tier4_debug_tools stop_reason2pose /planning/scenario_planning/status/stop_reasons\n\n$ ros2 topic list | ag stop_reason2pose\n/stop_reason2pose/pose/detection_area\n/stop_reason2pose/pose/detection_area_1\n/stop_reason2pose/pose/obstacle_stop\n/stop_reason2pose/pose/obstacle_stop_1\n\n$ ros2 topic echo /stop_reason2pose/pose/detection_area -n1\nheader:\n  seq: 1\nstamp:\n    secs: 1605168355\nnsecs:    821713\nframe_id: \"map\"\npose:\n  position:\n    x: 60608.8433457\n    y: 43886.2410876\n    z: 44.9078212441\n  orientation:\n    x: 0.0\n    y: 0.0\n    z: -0.190261378408\n    w: 0.981733470901\n---\n</code></pre>"},{"location":"common/tier4_debug_tools/#stop_reason2tf","title":"stop_reason2tf","text":"<p>This is an all-in-one script that uses <code>tf2pose</code>, <code>pose2tf</code>, and <code>stop_reason2pose</code>. With this tool, you can view the relative position from base_link to the nearest stop_reason.</p> <pre><code>ros2 run tier4_debug_tools stop_reason2tf {stop_reason_name}\n</code></pre> <p>Example:</p> <pre><code>$ ros2 run tier4_debug_tools stop_reason2tf obstacle_stop\nAt time 1605168359.501\n- Translation: [0.291, -0.095, 0.266]\n- Rotation: in Quaternion [0.007, 0.011, -0.005, 1.000]\nin RPY (radian) [0.014, 0.023, -0.010]\nin RPY (degree) [0.825, 1.305, -0.573]\n</code></pre>"},{"location":"common/tier4_debug_tools/#lateral_error_publisher","title":"lateral_error_publisher","text":"<p>This node calculate the control error and localization error in the trajectory normal direction as shown in the figure below.</p> <p></p> <p>Set the reference trajectory, vehicle pose and ground truth pose in the launch file.</p> <pre><code>ros2 launch tier4_debug_tools lateral_error_publisher.launch.xml\n</code></pre>"},{"location":"planning/planning_debug_tools/","title":"Planning Debug Tools","text":""},{"location":"planning/planning_debug_tools/#planning-debug-tools","title":"Planning Debug Tools","text":"<p>This package contains several planning-related debug tools.</p> <ul> <li>Trajectory analyzer: visualizes the information (speed, curvature, yaw, etc) along the trajectory</li> <li>Closest velocity checker: prints the velocity information indicated by each modules</li> <li>Perception reproducer: generates detected objects from rosbag data in planning simulator environment</li> <li>processing time checker: displays processing_time of modules on the terminal</li> <li>logging level updater: updates the logging level of the planning modules.</li> </ul>"},{"location":"planning/planning_debug_tools/#trajectory-analyzer","title":"Trajectory analyzer","text":"<p>The <code>trajectory_analyzer</code> visualizes the information (speed, curvature, yaw, etc) along the trajectory. This feature would be helpful for purposes such as \"investigating the reason why the vehicle decelerates here\". This feature employs the OSS PlotJuggler.</p> <p></p>"},{"location":"planning/planning_debug_tools/#stop-reason-visualizer","title":"Stop reason visualizer","text":"<p>This is to visualize stop factor and reason. see the details</p>"},{"location":"planning/planning_debug_tools/#how-to-use","title":"How to use","text":"<p>please launch the analyzer node</p> <pre><code>ros2 launch planning_debug_tools trajectory_analyzer.launch.xml\n</code></pre> <p>and visualize the analyzed data on the plot juggler following below.</p>"},{"location":"planning/planning_debug_tools/#setup-plotjuggler","title":"setup PlotJuggler","text":"<p>For the first time, please add the following code to reactive script and save it as the picture below! (Looking for the way to automatically load the configuration file...)</p> <p>You can customize what you plot by editing this code.</p> <p></p> <p>in Global code</p> <pre><code>behavior_path = '/planning/scenario_planning/lane_driving/behavior_planning/path_with_lane_id/debug_info'\nbehavior_velocity = '/planning/scenario_planning/lane_driving/behavior_planning/path/debug_info'\nmotion_avoid = '/planning/scenario_planning/lane_driving/motion_planning/obstacle_avoidance_planner/trajectory/debug_info'\nmotion_smoother_latacc = '/planning/scenario_planning/motion_velocity_smoother/debug/trajectory_lateral_acc_filtered/debug_info'\nmotion_smoother = '/planning/scenario_planning/trajectory/debug_info'\n</code></pre> <p>in function(tracker_time)</p> <pre><code>PlotCurvatureOverArclength('k_behavior_path', behavior_path, tracker_time)\nPlotCurvatureOverArclength('k_behavior_velocity', behavior_velocity, tracker_time)\nPlotCurvatureOverArclength('k_motion_avoid', motion_avoid, tracker_time)\nPlotCurvatureOverArclength('k_motion_smoother', motion_smoother, tracker_time)\n\nPlotVelocityOverArclength('v_behavior_path', behavior_path, tracker_time)\nPlotVelocityOverArclength('v_behavior_velocity', behavior_velocity, tracker_time)\nPlotVelocityOverArclength('v_motion_avoid', motion_avoid, tracker_time)\nPlotVelocityOverArclength('v_motion_smoother_latacc', motion_smoother_latacc, tracker_time)\nPlotVelocityOverArclength('v_motion_smoother', motion_smoother, tracker_time)\n\nPlotAccelerationOverArclength('a_behavior_path', behavior_path, tracker_time)\nPlotAccelerationOverArclength('a_behavior_velocity', behavior_velocity, tracker_time)\nPlotAccelerationOverArclength('a_motion_avoid', motion_avoid, tracker_time)\nPlotAccelerationOverArclength('a_motion_smoother_latacc', motion_smoother_latacc, tracker_time)\nPlotAccelerationOverArclength('a_motion_smoother', motion_smoother, tracker_time)\n\nPlotYawOverArclength('yaw_behavior_path', behavior_path, tracker_time)\nPlotYawOverArclength('yaw_behavior_velocity', behavior_velocity, tracker_time)\nPlotYawOverArclength('yaw_motion_avoid', motion_avoid, tracker_time)\nPlotYawOverArclength('yaw_motion_smoother_latacc', motion_smoother_latacc, tracker_time)\nPlotYawOverArclength('yaw_motion_smoother', motion_smoother, tracker_time)\n\nPlotCurrentVelocity('localization_kinematic_state', '/localization/kinematic_state', tracker_time)\n</code></pre> <p>in Function Library </p> <pre><code>function PlotValue(name, path, timestamp, value)\n  new_series = ScatterXY.new(name)\n  index = 0\n  while(true) do\n    series_k = TimeseriesView.find( string.format( \"%s/\"..value..\".%d\", path, index) )\n    series_s = TimeseriesView.find( string.format( \"%s/arclength.%d\", path, index) )\n    series_size = TimeseriesView.find( string.format( \"%s/size\", path) )\n\n    if series_k == nil or series_s == nil then break end\n\n    k = series_k:atTime(timestamp)\n    s = series_s:atTime(timestamp)\n    size = series_size:atTime(timestamp)\n\n    if index &gt;= size then break end\n\n    new_series:push_back(s,k)\n    index = index+1\n  end\nend\n\nfunction PlotCurvatureOverArclength(name, path, timestamp)\n  PlotValue(name, path, timestamp,\"curvature\")\nend\n\nfunction PlotVelocityOverArclength(name, path, timestamp)\n  PlotValue(name, path, timestamp,\"velocity\")\nend\n\nfunction PlotAccelerationOverArclength(name, path, timestamp)\n  PlotValue(name, path, timestamp,\"acceleration\")\nend\n\nfunction PlotYawOverArclength(name, path, timestamp)\n  PlotValue(name, path, timestamp,\"yaw\")\nend\n\nfunction PlotCurrentVelocity(name, kinematics_name, timestamp)\n  new_series = ScatterXY.new(name)\n  series_v = TimeseriesView.find( string.format( \"%s/twist/twist/linear/x\", kinematics_name))\n  if series_v == nil then\n    print(\"error\")\n    return\n  end\n  v = series_v:atTime(timestamp)\n  new_series:push_back(0.0, v)\nend\n</code></pre> <p>Then, run the plot juggler.</p>"},{"location":"planning/planning_debug_tools/#how-to-customize-the-plot","title":"How to customize the plot","text":"<p>Add Path/PathWithLaneIds/Trajectory topics you want to plot in the <code>trajectory_analyzer.launch.xml</code>, then the analyzed topics for these messages will be published with <code>TrajectoryDebugINfo.msg</code> type. You can then visualize these data by editing the reactive script on the PlotJuggler.</p>"},{"location":"planning/planning_debug_tools/#requirements","title":"Requirements","text":"<p>The version of the plotJuggler must be &gt; <code>3.5.0</code></p>"},{"location":"planning/planning_debug_tools/#closest-velocity-checker","title":"Closest velocity checker","text":"<p>This node prints the velocity information indicated by planning/control modules on a terminal. For trajectories calculated by planning modules, the target velocity on the trajectory point which is closest to the ego vehicle is printed. For control commands calculated by control modules, the target velocity and acceleration is directly printed. This feature would be helpful for purposes such as \"investigating the reason why the vehicle does not move\".</p> <p>You can launch by</p> <pre><code>ros2 run planning_debug_tools closest_velocity_checker.py\n</code></pre> <p></p>"},{"location":"planning/planning_debug_tools/#trajectory-visualizer","title":"Trajectory visualizer","text":"<p>The old version of the trajectory analyzer. It is written in Python and more flexible, but very slow.</p>"},{"location":"planning/planning_debug_tools/#for-other-use-case-experimental","title":"For other use case (experimental)","text":"<p>To see behavior velocity planner's internal plath with lane id add below example value to behavior velocity analyzer and set <code>is_publish_debug_path: true</code></p> <pre><code>crosswalk ='/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/debug/path_with_lane_id/crosswalk/debug_info'\nintersection ='/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/debug/path_with_lane_id/intersection/debug_info'\ntraffic_light ='/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/debug/path_with_lane_id/traffic_light/debug_info'\nmerge_from_private ='/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/debug/path_with_lane_id/merge_from_private/debug_info'\nocclusion_spot ='/planning/scenario_planning/lane_driving/behavior_planning/behavior_velocity_planner/debug/path_with_lane_id/occlusion_spot/debug_info'\n</code></pre> <pre><code>PlotVelocityOverArclength('v_crosswalk', crosswalk, tracker_time)\nPlotVelocityOverArclength('v_intersection', intersection, tracker_time)\nPlotVelocityOverArclength('v_merge_from_private', merge_from_private, tracker_time)\nPlotVelocityOverArclength('v_traffic_light', traffic_light, tracker_time)\nPlotVelocityOverArclength('v_occlusion', occlusion_spot, tracker_time)\n\nPlotYawOverArclength('yaw_crosswalk', crosswalk, tracker_time)\nPlotYawOverArclength('yaw_intersection', intersection, tracker_time)\nPlotYawOverArclength('yaw_merge_from_private', merge_from_private, tracker_time)\nPlotYawOverArclength('yaw_traffic_light', traffic_light, tracker_time)\nPlotYawOverArclength('yaw_occlusion', occlusion_spot, tracker_time)\n\nPlotCurrentVelocity('localization_kinematic_state', '/localization/kinematic_state', tracker_time)\n</code></pre>"},{"location":"planning/planning_debug_tools/#perception-reproducer","title":"Perception reproducer","text":"<p>This script can overlay the perception results from the rosbag on the planning simulator synchronized with the simulator's ego pose.</p> <p>In detail, the ego pose in the rosbag which is closest to the current ego pose in the simulator is calculated. The perception results at the timestamp of the closest ego pose is extracted, and published.</p>"},{"location":"planning/planning_debug_tools/#how-to-use_1","title":"How to use","text":"<p>First, launch the planning simulator, and put the ego pose. Then, run the script according to the following command.</p> <p>By designating a rosbag, perception reproducer can be launched.</p> <pre><code>ros2 run planning_debug_tools perception_reproducer.py -b &lt;bag-file&gt;\n</code></pre> <p>You can designate multiple rosbags in the directory.</p> <pre><code>ros2 run planning_debug_tools perception_reproducer.py -b &lt;dir-to-bag-files&gt;\n</code></pre> <p>Instead of publishing predicted objects, you can publish detected/tracked objects by designating <code>-d</code> or <code>-t</code>, respectively.</p>"},{"location":"planning/planning_debug_tools/#perception-replayer","title":"Perception replayer","text":"<p>A part of the feature is under development.</p> <p>This script can overlay the perception results from the rosbag on the planning simulator.</p> <p>In detail, this script publishes the data at a certain timestamp from the rosbag. The timestamp will increase according to the real time without any operation. By using the GUI, you can modify the timestamp by pausing, changing the rate or going back into the past.</p>"},{"location":"planning/planning_debug_tools/#how-to-use_2","title":"How to use","text":"<p>First, launch the planning simulator, and put the ego pose. Then, run the script according to the following command.</p> <p>By designating a rosbag, perception replayer can be launched. The GUI is launched as well with which a timestamp of rosbag can be managed.</p> <pre><code>ros2 run planning_debug_tools perception_replayer.py -b &lt;bag-file&gt;\n</code></pre> <p>You can designate multiple rosbags in the directory.</p> <pre><code>ros2 run planning_debug_tools perception_replayer.py -b &lt;dir-to-bag-files&gt;\n</code></pre> <p>Instead of publishing predicted objects, you can publish detected/tracked objects by designating <code>-d</code> or <code>-t</code>, respectively.</p>"},{"location":"planning/planning_debug_tools/#processing-time-checker","title":"Processing time checker","text":"<p>The purpose of the Processing Time Subscriber is to monitor and visualize the processing times of various ROS 2 topics in a system. By providing a real-time terminal-based visualization, users can easily confirm the processing time performance as in the picture below.</p> <p></p> <p>You can run the program by the following command.</p> <pre><code>ros2 run planning_debug_tools processing_time_checker.py -f &lt;update-hz&gt; -m &lt;max-bar-time&gt;\n</code></pre> <p>This program subscribes to ROS 2 topics that have a suffix of <code>processing_time_ms</code>.</p> <p>The program allows users to customize two parameters via command-line arguments:</p> <ul> <li>--max_display_time (or -m): This sets the maximum display time in milliseconds. The default value is 150ms.</li> <li>--display_frequency (or -f): This sets the frequency at which the terminal UI updates. The default value is 5Hz.</li> </ul> <p>By adjusting these parameters, users can tailor the display to their specific monitoring needs.</p>"},{"location":"planning/planning_debug_tools/#logging-level-updater","title":"Logging Level Updater","text":"<p>The purpose of the Logging Level Updater is to update the logging level of the planning modules via ROS 2 service. Users can easily update the logging level for debugging.</p> <pre><code>ros2 run planning_debug_tools update_logger_level.sh &lt;module-name&gt; &lt;logger-level&gt;\n</code></pre> <p><code>&lt;logger-level&gt;</code> will be <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, or <code>ERROR</code>.</p> <p></p> <p>When you have a typo of the planning module, the script will show the available modules.</p> <p></p>"},{"location":"planning/planning_debug_tools/doc-stop-reason-visualizer/","title":"Doc stop reason visualizer","text":""},{"location":"planning/planning_debug_tools/doc-stop-reason-visualizer/#stop_reason_visualizer","title":"stop_reason_visualizer","text":"<p>This module is to visualize stop factor quickly without selecting correct debug markers. This is supposed to use with virtual wall marker like below. </p>"},{"location":"planning/planning_debug_tools/doc-stop-reason-visualizer/#how-to-use","title":"How to use","text":"<p>Run this node.</p> <pre><code>ros2 run planning_debug_tools stop_reason_visualizer_exe\n</code></pre> <p>Add stop reason debug marker from rviz.</p> <p></p> <p>Note: ros2 process can be sometimes deleted only from <code>killall stop_reason_visualizer_exe</code></p> <p>Reference</p>"},{"location":"simulator/simulator_compatibility_test/","title":"simulator_compatibility_test","text":""},{"location":"simulator/simulator_compatibility_test/#simulator_compatibility_test","title":"simulator_compatibility_test","text":""},{"location":"simulator/simulator_compatibility_test/#purpose","title":"Purpose","text":"<p>Test procedures (e.g. test codes) to check whether a certain simulator is compatible with Autoware</p>"},{"location":"simulator/simulator_compatibility_test/#overview-of-the-test-codes","title":"Overview of the test codes","text":"<p>File structure</p> <ul> <li>test_base</li> <li>test_sim_common_manual_testing</li> <li>test_morai_sim</li> </ul> <ol> <li>test_base provides shared methods for testing. Other test codes are created based on functions defined here.</li> <li>test_sim_common_manual_testing provides the most basic functions. Any simulator can be tested using codes here. However, to make these codes usable with any simulators, the codes do not include any features for test automation.</li> <li>test_morai_sim is an automated version of test_sim_common_manual_testing for MORAI SIM: Drive. Thus it includes 'MORAI SIM: Drive'-specific codes. Users of the other simulators may create similar version for their simulator of interest.</li> </ol>"},{"location":"simulator/simulator_compatibility_test/#test-procedures-for-test_sim_common_manual_testing","title":"Test Procedures for test_sim_common_manual_testing","text":""},{"location":"simulator/simulator_compatibility_test/#build-process-before-test","title":"Build process before test","text":"<pre><code>source install/setup.bash\ncolcon build --packages-select simulator_compatibility_test\ncd src/universe/autoware.universe/tools/simulator_test/simulator_compatibility_test/test_sim_common_manual_testing\n</code></pre> <p>To run each test case manually</p>"},{"location":"simulator/simulator_compatibility_test/#test-case-1","title":"Test Case #1","text":"<ol> <li>Run your simulator</li> <li>Load a map and an ego vehicle for the test</li> <li> <p>Run the test using the following command</p> <pre><code>python -m pytest test_01_control_mode_and_report.py\n</code></pre> </li> <li> <p>Check if expected behavior is created within the simulator</p> <ul> <li>Ego vehicle control mode is changed into Manual (If the simulator has a GUI for this one, it should display the ego is in Manual)</li> <li>Ego vehicle control mode is changed into Auto (If the simulator has a GUI for this one, it should display the ego is in Auto)</li> </ul> </li> <li>Check if pytest output is passed or failure</li> </ol>"},{"location":"simulator/simulator_compatibility_test/#test-case-2","title":"Test Case #2","text":"<ol> <li>Run your simulator (If the simulator is already running, skip this part)</li> <li>Load a map and an ego vehicle for the test (If a map and an ego are loaded already, skip this part)</li> <li> <p>Run the test using the following command</p> <pre><code>python -m pytest test_02_change_gear_and_report.py\n</code></pre> </li> <li> <p>Check if expected behavior is created within the simulator</p> <ul> <li>Ego vehicle gear mode is changed into \"P\" (If the simulator has a GUI for this one, it should display the gear mode is in \"P\")</li> <li>Ego vehicle gear mode is changed into \"N\" (If the simulator has a GUI for this one, it should display the gear mode is in \"N\")</li> <li>Ego vehicle gear mode is changed into \"R\" (If the simulator has a GUI for this one, it should display the gear mode is in \"R\")</li> <li>Ego vehicle gear mode is changed into \"D\" (If the simulator has a GUI for this one, it should display the gear mode is in \"D\")</li> </ul> </li> <li>Check if pytest output is passed or failure</li> </ol>"},{"location":"simulator/simulator_compatibility_test/#test-case-3","title":"Test Case #3","text":"<ol> <li>Run your simulator (If the simulator is already running, skip this part)</li> <li>Load a map and an ego vehicle for the test (If a map and an ego are loaded already, skip this part)</li> <li> <p>Run the test using the following command</p> <pre><code>python -m pytest test_03_longitudinal_command_and_report.py\n</code></pre> </li> <li> <p>Check if expected behavior is created within the simulator</p> <ul> <li>Ego vehicle longitudinal velocity is greater than 10 kph (If the simulator has a GUI for this one, it should display the longitudinal velocity is greater than 10 kph)</li> <li>Ego vehicle longitudinal velocity is going below 10 kph. This is an ego vehicle initialize process to ensure the following acceleration is made by longitudinal.acceleration value (If the simulator has a GUI for this one, it should display the longitudinal velocity is less than 10 kph)</li> <li>Ego vehicle longitudinal velocity is greater than 10 kph (If the simulator has a GUI for this one, it should display the longitudinal velocity is greater than 10 kph)</li> <li>Ego vehicle longitudinal velocity is going below 10 kph. This is an ego vehicle reset process to tear down this test case.</li> </ul> </li> <li>Check if pytest output is passed or failure</li> </ol>"},{"location":"simulator/simulator_compatibility_test/#test-case-4","title":"Test Case #4","text":"<ol> <li>Run your simulator (If the simulator is already running, skip this part)</li> <li>Load a map and an ego vehicle for the test (If a map and an ego are loaded already, skip this part)</li> <li> <p>Run the test using the following command</p> <pre><code>python -m pytest test_04_lateral_command_and_report.py\n</code></pre> </li> <li> <p>Check if expected behavior is created within the simulator</p> <ul> <li>Ego vehicle steering and/or tire value is greater than 0 degree (If the simulator has a GUI for this one, it should display the steering and/or tire is greater than 0 degree)</li> <li>Ego vehicle steering and/or tire value is 0 degree. This is a reset process. (If the simulator has a GUI for this one, it should display the steering and/or tire is 0 degree)</li> <li>Ego vehicle steering and/or tire value is less than 0 degree (If the simulator has a GUI for this one, it should display the steering and/or tire is less than 0 degree)</li> <li>Ego vehicle steering and/or tire value is 0 degree. This is a reset process. (If the simulator has a GUI for this one, it should display the steering and/or tire is 0 degree)</li> </ul> </li> <li>Check if pytest output is passed or failure</li> </ol>"},{"location":"simulator/simulator_compatibility_test/#test-case-5","title":"Test Case #5","text":"<ol> <li>Run your simulator (If the simulator is already running, skip this part)</li> <li>Load a map and an ego vehicle for the test (If a map and an ego are loaded already, skip this part)</li> <li> <p>Run the test using the following command</p> <pre><code>python -m pytest test_05_turn_indicators_cmd_and_report.py\n</code></pre> </li> <li> <p>Check if expected behavior is created within the simulator</p> <ul> <li>Ego vehicle left turn indicator is turned on (If the simulator has a GUI for this one, it should display the left turn indicator is turned on)</li> <li>Ego vehicle right turn indicator is turned on (If the simulator has a GUI for this one, it should display the right turn indicator is turned on)</li> <li>Ego vehicle both turn indicators are turned off. This is a reset process. (If the simulator has a GUI for this one, it should display both left and right turn indicators are turned off)</li> </ul> </li> <li>Check if pytest output is passed or failure</li> </ol>"},{"location":"simulator/simulator_compatibility_test/#test-case-6","title":"Test Case #6","text":"<ol> <li>Run your simulator (If the simulator is already running, skip this part)</li> <li>Load a map and an ego vehicle for the test (If a map and an ego are loaded already, skip this part)</li> <li> <p>Run the test using the following command</p> <pre><code>python -m pytest test_06_hazard_lights_cmd_and_report.py\n</code></pre> </li> <li> <p>Check if expected behavior is created within the simulator</p> <ul> <li>Ego vehicle hazard lights are turned on (If the simulator has a GUI for this one, it should display the hazard lights are turned on or blinking)</li> <li>Ego vehicle hazard lights are turned off. This is a reset process. (If the simulator has a GUI for this one, it should display the hazard lights are turned off)</li> </ul> </li> <li>Check if pytest output is passed or failure</li> </ol>"},{"location":"simulator/simulator_compatibility_test/#test-procedures-for-test_morai_sim","title":"Test Procedures for test_morai_sim","text":""},{"location":"simulator/simulator_compatibility_test/#build-process-before-test_1","title":"Build process before test","text":"<pre><code>source install/setup.bash\ncolcon build --packages-select simulator_compatibility_test\ncd src/universe/autoware.universe/tools/simulator_test/simulator_compatibility_test/test_morai_sim\n</code></pre> <p>Detailed process</p> <p>(WIP)</p>"},{"location":"simulator/simulator_compatibility_test/#inner-workings-algorithms","title":"Inner-workings / Algorithms","text":""},{"location":"simulator/simulator_compatibility_test/#inputs-outputs","title":"Inputs / Outputs","text":""},{"location":"simulator/simulator_compatibility_test/#input","title":"Input","text":"Name Type Description <code>/vehicle/status/control_mode</code> <code>autoware_auto_vehicle_msgs::msg::ControlModeReport</code> for [Test Case #1] <code>/vehicle/status/gear_status</code> <code>autoware_auto_vehicle_msgs::msg::GearReport</code> for [Test Case #2] <code>/vehicle/status/velocity_status</code> <code>autoware_auto_vehicle_msgs::msg::VelocityReport</code> for [Test Case #3] <code>/vehicle/status/steering_status</code> <code>autoware_auto_vehicle_msgs::msg::SteeringReport</code> for [Test Case #4] <code>/vehicle/status/turn_indicators_status</code> <code>autoware_auto_vehicle_msgs::msg::TurnIndicatorsReport</code> for [Test Case #5] <code>/vehicle/status/hazard_lights_status</code> <code>autoware_auto_vehicle_msgs::msg::HazardLightsReport</code> for [Test Case #6]"},{"location":"simulator/simulator_compatibility_test/#output","title":"Output","text":"Name Type Description <code>/control/command/control_mode_cmd</code> <code>autoware_auto_vehicle_msgs/ControlModeCommand</code> for [Test Case #1] <code>/control/command/gear_cmd</code> <code>autoware_auto_vehicle_msgs/GearCommand</code> for [Test Case #2] <code>/control/command/control_cmd</code> <code>autoware_auto_vehicle_msgs/AckermannControlCommand</code> for [Test Case #3, #4] <code>/vehicle/status/steering_status</code> <code>autoware_auto_vehicle_msgs/TurnIndicatorsCommand</code> for [Test Case #5] <code>/control/command/turn_indicators_cmd</code> <code>autoware_auto_vehicle_msgs/HazardLightsCommand</code> for [Test Case #6]"},{"location":"simulator/simulator_compatibility_test/#parameters","title":"Parameters","text":"<p>None.</p>"},{"location":"simulator/simulator_compatibility_test/#node-parameters","title":"Node Parameters","text":"<p>None.</p>"},{"location":"simulator/simulator_compatibility_test/#core-parameters","title":"Core Parameters","text":"<p>None.</p>"},{"location":"simulator/simulator_compatibility_test/#assumptions-known-limits","title":"Assumptions / Known limits","text":"<p>None.</p>"},{"location":"vehicle/accel_brake_map_calibrator/","title":"accel_brake_map_calibrator","text":""},{"location":"vehicle/accel_brake_map_calibrator/#accel_brake_map_calibrator","title":"accel_brake_map_calibrator","text":"<p>The role of this node is to automatically calibrate <code>accel_map.csv</code> / <code>brake_map.csv</code> used in the <code>raw_vehicle_cmd_converter</code> node.</p> <p>The base map, which is lexus's one by default, is updated iteratively with the loaded driving data.</p>"},{"location":"vehicle/accel_brake_map_calibrator/#how-to-calibrate","title":"How to calibrate","text":""},{"location":"vehicle/accel_brake_map_calibrator/#launch-calibrator","title":"Launch Calibrator","text":"<p>After launching Autoware, run the <code>accel_brake_map_calibrator</code> by the following command and then perform autonomous driving. Note: You can collect data with manual driving if it is possible to use the same vehicle interface as during autonomous driving (e.g. using a joystick).</p> <pre><code>ros2 launch accel_brake_map_calibrator accel_brake_map_calibrator.launch.xml rviz:=true\n</code></pre> <p>Or if you want to use rosbag files, run the following commands.</p> <pre><code>ros2 launch accel_brake_map_calibrator accel_brake_map_calibrator.launch.xml rviz:=true use_sim_time:=true\nros2 bag play &lt;rosbag_file&gt; --clock\n</code></pre> <p>During the calibration with setting the parameter <code>progress_file_output</code> to true, the log file is output in [directory of accel_brake_map_calibrator]/config/ . You can also see accel and brake maps in [directory of accel_brake_map_calibrator]/config/accel_map.csv and [directory of accel_brake_map_calibrator]/config/brake_map.csv after calibration.</p>"},{"location":"vehicle/accel_brake_map_calibrator/#calibration-plugin","title":"Calibration plugin","text":"<p>The <code>rviz:=true</code> option displays the RViz with a calibration plugin as below.</p> <p> </p> <p>The current status (velocity and pedal) is shown in the plugin. The color on the current cell varies green/red depending on the current data is valid/invalid. The data that doesn't satisfy the following conditions are considered invalid and will not be used for estimation since aggressive data (e.g. when the pedal is moving fast) causes bad calibration accuracy.</p> <ul> <li>The velocity and pedal conditions are within certain ranges from the index values.</li> <li>The steer value, pedal speed, pitch value, etc. are less than corresponding thresholds.</li> <li>The velocity is higher than a threshold.</li> </ul> <p>The detailed parameters are described in the parameter section.</p> <p>Note: You don't need to worry about whether the current state is red or green during calibration. Just keep getting data until all the cells turn red.</p> <p>The value of each cell in the map is gray at first, and it changes from blue to red as the number of valid data in the cell accumulates. It is preferable to continue the calibration until each cell of the map becomes close to red. In particular, the performance near the stop depends strongly on the velocity of 0 ~ 6m/s range and the pedal value of +0.2 ~ -0.4, range so it is desirable to focus on those areas.</p>"},{"location":"vehicle/accel_brake_map_calibrator/#diagnostics","title":"Diagnostics","text":"<p>The <code>accel brake map_calibrator</code> publishes diagnostics message depending on the calibration status. Diagnostic type <code>WARN</code> indicates that the current accel/brake map is estimated to be inaccurate. In this situation, it is strongly recommended to perform a re-calibration of the accel/brake map.</p> Status Diagnostics Type Diagnostics message Description No calibration required <code>OK</code> \"OK\" Calibration Required <code>WARN</code> \"Accel/brake map Calibration is required.\" The accuracy of current accel/brake map may be low. <p>This diagnostics status can be also checked on the following ROS topic.</p> <pre><code>ros2 topic echo /accel_brake_map_calibrator/output/update_suggest\n</code></pre> <p>When the diagnostics type is <code>WARN</code>, <code>True</code> is published on this topic and the update of the accel/brake map is suggested.</p>"},{"location":"vehicle/accel_brake_map_calibrator/#evaluation-of-the-accel-brake-map-accuracy","title":"Evaluation of the accel / brake map accuracy","text":"<p>The accuracy of map is evaluated by the Root Mean Squared Error (RMSE) between the observed acceleration and predicted acceleration.</p> <p>TERMS:</p> <ul> <li><code>Observed acceleration</code>: the current vehicle acceleration which is calculated as a derivative value of the wheel speed.</li> </ul> <ul> <li><code>Predicted acceleration</code>: the output of the original accel/brake map, which the Autoware is expecting. The value is calculated using the current pedal and velocity.</li> </ul> <p>You can check additional error information with the following topics.</p> <ul> <li><code>/accel_brake_map_calibrator/output/current_map_error</code> : The error of the original map set in the <code>csv_path_accel/brake_map</code> path. The original map is not accurate if this value is large.</li> <li><code>/accel_brake_map_calibrator/output/updated_map_error</code> : The error of the map calibrated in this node. The calibration quality is low if this value is large.</li> <li><code>/accel_brake_map_calibrator/output/map_error_ratio</code> : The error ratio between the original map and updated map (ratio = updated / current). If this value is less than 1, it is desirable to update the map.</li> </ul>"},{"location":"vehicle/accel_brake_map_calibrator/#how-to-visualize-calibration-data","title":"How to visualize calibration data","text":"<p>The process of calibration can be visualized as below. Since these scripts need the log output of the calibration, the <code>pedal_accel_graph_output</code> parameter must be set to true while the calibration is running for the visualization.</p>"},{"location":"vehicle/accel_brake_map_calibrator/#visualize-plot-of-relation-between-acceleration-and-pedal","title":"Visualize plot of relation between acceleration and pedal","text":"<p>The following command shows the plot of used data in the calibration. In each plot of velocity ranges, you can see the distribution of the relationship between pedal and acceleration, and raw data points with colors according to their pitch angles.</p> <pre><code>ros2 run accel_brake_map_calibrator view_plot.py\n</code></pre> <p></p>"},{"location":"vehicle/accel_brake_map_calibrator/#visualize-statistics-about-accelerationvelocitypedal-data","title":"Visualize statistics about acceleration/velocity/pedal data","text":"<p>The following command shows the statistics of the calibration:</p> <ul> <li>mean value</li> <li>standard deviation</li> <li>number of data</li> </ul> <p>of all data in each map cell.</p> <pre><code>ros2 run accel_brake_map_calibrator view_statistics.py\n</code></pre> <p></p>"},{"location":"vehicle/accel_brake_map_calibrator/#how-to-save-the-calibrated-accel-brake-map-anytime-you-want","title":"How to save the calibrated accel / brake map anytime you want","text":"<p>You can save accel and brake map anytime with the following command.</p> <pre><code>ros2 service call /accel_brake_map_calibrator/update_map_dir tier4_vehicle_msgs/srv/UpdateAccelBrakeMap \"path: '&lt;accel/brake map directory&gt;'\"\n</code></pre> <p>You can also save accel and brake map in the default directory where Autoware reads accel_map.csv/brake_map.csv using the RViz plugin (AccelBrakeMapCalibratorButtonPanel) as following.</p> <ol> <li> <p>Click Panels tab, and select AccelBrakeMapCalibratorButtonPanel.</p> <p></p> </li> <li> <p>Select the panel, and the button will appear at the bottom of RViz.</p> <p></p> </li> <li> <p>Press the button, and the accel / brake map will be saved.    (The button cannot be pressed in certain situations, such as when the calibrator node is not running.)</p> <p></p> </li> </ol>"},{"location":"vehicle/accel_brake_map_calibrator/#parameters","title":"Parameters","text":""},{"location":"vehicle/accel_brake_map_calibrator/#system-parameters","title":"System Parameters","text":"Name Type Description Default value update_method string you can select map calibration method. \"update_offset_each_cell\" calculates offsets for each grid cells on the map. \"update_offset_total\" calculates the total offset of the map. \"update_offset_each_cell\" get_pitch_method string \"tf\": get pitch from tf, \"none\": unable to perform pitch validation and pitch compensation \"tf\" pedal_accel_graph_output bool if true, it will output a log of the pedal accel graph. true progress_file_output bool if true, it will output a log and csv file of the update process. false default_map_dir str directory of default map [directory of raw_vehicle_cmd_converter]/data/default/ calibrated_map_dir str directory of calibrated map [directory of accel_brake_map_calibrator]/config/ update_hz double hz for update 10.0"},{"location":"vehicle/accel_brake_map_calibrator/#algorithm-parameters","title":"Algorithm Parameters","text":"Name Type Description Default value initial_covariance double Covariance of initial acceleration map (larger covariance makes the update speed faster) 0.05 velocity_min_threshold double Speeds smaller than this are not used for updating. 0.1 velocity_diff_threshold double When the velocity data is more than this threshold away from the grid reference speed (center value), the associated data is not used for updating. 0.556 max_steer_threshold double If the steer angle is greater than this value, the associated data is not used for updating. 0.2 max_pitch_threshold double If the pitch angle is greater than this value, the associated data is not used for updating. 0.02 max_jerk_threshold double If the ego jerk calculated from ego acceleration is greater than this value, the associated data is not used for updating. 0.7 pedal_velocity_thresh double If the pedal moving speed is greater than this value, the associated data is not used for updating. 0.15 pedal_diff_threshold double If the current pedal value is more then this threshold away from the previous value, the associated data is not used for updating. 0.03 max_accel double Maximum value of acceleration calculated from velocity source. 5.0 min_accel double Minimum value of acceleration calculated from velocity source. -5.0 pedal_to_accel_delay double The delay time between actuation_cmd to acceleration, considered in the update logic. 0.3 update_suggest_thresh double threshold of RMSE ratio that update suggest flag becomes true. ( RMSE ratio: [RMSE of new map] / [RMSE of original map] ) 0.7 max_data_count int For visualization. When the data num of each grid gets this value, the grid color gets red. 100 accel_brake_value_source string Whether to use actuation_status or actuation_command as accel/brake sources. value status"},{"location":"vehicle/accel_brake_map_calibrator/#test-utility-scripts","title":"Test utility scripts","text":""},{"location":"vehicle/accel_brake_map_calibrator/#constant-accelbrake-command-test","title":"Constant accel/brake command test","text":"<p>These scripts are useful to test for accel brake map calibration. These generate an <code>ActuationCmd</code> with a constant accel/brake value given interactively by a user through CLI.</p> <ul> <li>accel_tester.py</li> <li>brake_tester.py</li> <li>actuation_cmd_publisher.py</li> </ul> <p>The <code>accel/brake_tester.py</code> receives a target accel/brake command from CLI. It sends a target value to <code>actuation_cmd_publisher.py</code> which generates the <code>ActuationCmd</code>. You can run these scripts by the following commands in the different terminals, and it will be as in the screenshot below.</p> <pre><code>ros2 run accel_brake_map_calibrator accel_tester.py\nros2 run accel_brake_map_calibrator brake_tester.py\nros2 run accel_brake_map_calibrator actuation_cmd_publisher.py\n</code></pre> <p></p>"},{"location":"vehicle/accel_brake_map_calibrator/#calibration-method","title":"Calibration Method","text":"<p>Two algorithms are selectable for the acceleration map update, update_offset_four_cell_around and update_offset_each_cell. Please see the link for details.</p>"},{"location":"vehicle/accel_brake_map_calibrator/#data-preprocessing","title":"Data Preprocessing","text":"<p>Before calibration, missing or unusable data (e.g., too large handle angles) must first be eliminated. The following parameters are used to determine which data to remove.</p>"},{"location":"vehicle/accel_brake_map_calibrator/#parameters_1","title":"Parameters","text":"Name Description Default Value velocity_min_threshold Exclude minimal velocity 0.1 max_steer_threshold Exclude large steering angle 0.2 max_pitch_threshold Exclude large pitch angle 0.02 max_jerk_threshold Exclude large jerk 0.7 pedal_velocity_thresh Exclude large pedaling speed 0.15"},{"location":"vehicle/accel_brake_map_calibrator/#update_offset_each_cell","title":"update_offset_each_cell","text":"<p>Update by Recursive Least Squares(RLS) method using data close enough to each grid.</p> <p>Advantage : Only data close enough to each grid is used for calibration, allowing accurate updates at each point.</p> <p>Disadvantage : Calibration is time-consuming due to a large amount of data to be excluded.</p>"},{"location":"vehicle/accel_brake_map_calibrator/#parameters_2","title":"Parameters","text":"<p>Data selection is determined by the following thresholds. | Name | Default Value | | ----------------------- | ------------- | | velocity_diff_threshold | 0.556 | | pedal_diff_threshold | 0.03 |</p>"},{"location":"vehicle/accel_brake_map_calibrator/#update-formula","title":"Update formula","text":"\\[ \\begin{align}     \\theta[n]=&amp;     \\theta[n-1]+\\frac{p[n-1]x^{(n)}}{\\lambda+p[n-1]{(x^{(n)})}^2}(y^{(n)}-\\theta[n-1]x^{(n)})\\\\     p[n]=&amp;\\frac{p[n-1]}{\\lambda+p[n-1]{(x^{(n)})}^2} \\end{align} \\]"},{"location":"vehicle/accel_brake_map_calibrator/#variables","title":"Variables","text":"Variable name Symbol covariance \\(p[n-1]\\) map_offset \\(\\theta[n]\\) forgettingfactor \\(\\lambda\\) phi \\(x(=1)\\) measured_acc \\(y\\)"},{"location":"vehicle/accel_brake_map_calibrator/#update_offset_four_cell_around-1","title":"update_offset_four_cell_around [1]","text":"<p>Update the offsets by RLS in four grids around newly obtained data. By considering linear interpolation, the update takes into account appropriate weights. Therefore, there is no need to remove data by thresholding.</p> <p>Advantage : No data is wasted because updates are performed on the 4 grids around the data with appropriate weighting. Disadvantage : Accuracy may be degraded due to extreme bias of the data. For example, if data \\(z(k)\\) is biased near \\(Z_{RR}\\) in Fig. 2, updating is performed at the four surrounding points ( \\(Z_{RR}\\), \\(Z_{RL}\\), \\(Z_{LR}\\), and \\(Z_{LL}\\)), but accuracy at \\(Z_{LL}\\) is not expected.</p> <p> </p>"},{"location":"vehicle/accel_brake_map_calibrator/#implementation","title":"Implementation","text":"<p>See eq.(7)-(10) in [1] for the updated formula. In addition, eq.(17),(18) from [1] are used for Anti-Windup.</p>"},{"location":"vehicle/accel_brake_map_calibrator/#references","title":"References","text":"<p>[1] Gabrielle Lochrie, Michael Doljevic, Mario Nona, Yongsoon Yoon, Anti-Windup Recursive Least Squares Method for Adaptive Lookup Tables with Application to Automotive Powertrain Control Systems, IFAC-PapersOnLine, Volume 54, Issue 20, 2021, Pages 840-845</p>"}]}